import random
import psycopg2

def gen_materials_f():
    connection = psycopg2.connect(
        host="localhost",
        port="5432",
        database="mydb",
        user="admin",
        password="admin"
    )

    cur = connection.cursor()
    cur.execute("SELECT id FROM classes");
    classes = cur.fetchall()
    
    materials = [
    'программирование', 'Java', 'Python', 'C++', 'алгоритм', 'интернет', 
    'база данных', 'SQL', 'система контроля версий', 'Git', 'веб-разработка', 
    'JavaScript', 'HTML', 'CSS', 'Backend', 'Frontend', 'API', 'фреймворк', 
    'объектно-ориентированное программирование', 'ООП', 'структуры данных', 
    'интерпретатор', 'компилятор', 'операционная система', 'Linux', 'Windows', 
    'MacOS', 'сети', 'антивирус', 'хакер', 'безопасность', 'SSL', 'криптография', 
    'двухфакторная аутентификация', 'облако', 'блокчейн', 'контейнеризация', 
    'Docker', 'виртуализация', 'веб-сервер', 'бэкенд', 'фронтенд', 'мобильное приложение', 
    'Android', 'iOS', 'агил', 'SCRUM', 'DevOps', 'баг', 'тестирование', 
    'сборка', 'отладка', 'интеграция', 'инфраструктура как код', 'CI/CD', 
    'непрерывная поставка', 'сервер', 'клиент', 'софтверные требования', 
    'документация', 'проектирование', 'архитектура', 'база данных', 'NoSQL', 
    'масштабируемость', 'оптимизация', 'производительность', 'обратная совместимость', 
    'фронтенд разработка', 'бэкенд разработка', 'веб-дизайн', 'реляционная база данных', 
    'транзакция', 'хранилище данных', 'сессия', 'веб-сокет', 'RESTful API', 
    'микросервисы', 'серверный рендеринг', 'одностраничное приложение', 'искусственный интеллект', 
    'машинное обучение', 'нейронная сеть', 'биг-дата', 'анализ данных', 'распределенные системы',
    'веб-разработчик', 'тестировщик', 'DevOps инженер', 'системный администратор', 'программист', 
    'кодирование', 'инженерия программного обеспечения', 'бэкенд-разработчик', 'фронтенд-разработчик', 
    'дизайн интерфейса', 'пользовательский опыт', 'верстка', 'рефакторинг', 'вёрстка', 'распределенные базы данных', 
    'облачные вычисления', 'компьютерная безопасность', 'цифровая подпись', 'шифрование', 'блокчейн технологии', 
    'умный договор', 'экосистема', 'подпись', 'интернет вещей', 'IoT', 'скопление данных', 'резервное копирование', 
    'виртуальная среда', 'облачные сервисы', 'эксплуатация', 'реинжиниринг', 'код', 'заголовок',
    'цикл разработки', 'телефонное приложение', 'протокол', 'локальная сеть', 'UI/UX', 'интерфейс', 
    'техническая поддержка', 'реализация', 'робототехника', 'моделирование', 'подпись', 'API-интерфейс', 
    'архитектура программного обеспечения', 'веб-сервис', 'многопользовательский доступ', 'администрирование сети', 
    'резервная копия', 'удаленный сервер', 'системная архитектура', 'виртуальная машина', 'алгоритмический анализ', 
    'когнитивный анализ', 'коммуникационный протокол', 'шифрование данных', 'браузер', 'интеграционный тест', 
    'разработчик интерфейса', 'преобразование данных', 'администрирование баз данных', 'веб-серверное приложение', 
    'контейнерная оркестрация', 'мониторинг приложений', 'схема базы данных', 'запрос к базе данных', 'безопасное программное обеспечение', 
    'восстановление данных', 'управление памятью', 'базовый адрес', 'алгоритм шифрования', 'компиляция кода', 'мессенджер', 
    'система управления базами данных', 'страница', 'иммутабельность', 'полиморфизм', 'массивы', 'индекс', 
    'серверная разработка', 'подключение к базе данных', 'управление транзакциями', 'интеграция API', 'программа', 
    'жесткий диск', 'виртуальная память', 'регистр адресов', 'вызов функции', 'каскадный стиль', 'блочная схема', 
    'язык запросов', 'бинарный код', 'обходной маршрут', 'рантайм', 'кодек', 'массивный пространственный стиль', 
    'контурный рендеринг', 'структура памяти', 'управление ошибками', 'объектно-ориентированный стиль', 'графическое ядро'
    ]

    file = open('materials.sql', 'w')

    query = 'INSERT INTO class_materials(class_id, file) VALUES\n'
    for clas in classes:
        classes_id = clas[0]
        for _ in range(1, random.randint(2, 6)):
            text = ' '.join([random.choice(materials) for _ in range(random.randint(3, 12))])
            query += f"({classes_id}, '{text}'),\n"
    query = query[:-2]
    cur.execute(query)
    connection.commit()
    connection.close()

    file.write(query)
    file.close()